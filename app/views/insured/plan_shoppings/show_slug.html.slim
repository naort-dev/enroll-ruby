- content_for :horizontal_status do
  = render :partial => 'insured/families/horizontal_status.html.erb', locals: {step: 2}
= render "ui-components/v1/modals/detail_modal"
#message_form
.container#plan_shoppings_show_form
  .select_plan_wrapper
    .row
      .col-lg-8.col-md-8.col-sm-8.col-xs-12
        .ct-1
          h1.darkblue= l10n("choose_plan")
          h4.switch-header= l10n(".choose_plan_filter_results_header")
          - if display_plan_cost_warning(@benefit_group)
            b= l10n("insured.plan_shoppings.final_cost_change")
          .row.no-buffer
            p.pull-right
              a.btn.btn-default.compare-selected-plans-link href="javascript:void(0);" style="display: none;" data-uri="#{comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind)}"
                = l10n("compare_plans").to_s.upcase
            #plan-summary
            #all-plans.all-filters-row
              = render partial: './ui-components/v1/filters/plan_filters'
              .col-lg-9.col-md-9.co-sm-9.col-xs-12 style="padding-right: 0"
                .sort-area style="margin:10px 0"
                  span.mr-1
                    strong = l10n("sort_by")
                  .btn-group#sort_by role="group"
                    a.btn.btn-default data-sort-by="plan-name" onclick="filterBy(this)" = l10n("plan_name")
                    a.btn.btn-default data-sort-by='plan-metal-premium' onclick="filterBy(this)" = l10n("premium_amount")
                    a.btn.btn-default data-sort-by='plan-metal-deductible' onclick="filterBy(this)" = l10n("deductible")
                    a.btn.btn-default data-sort-by='plan-carrier' onclick="filterBy(this)" = l10n("carrier")
                #plans
                 = render partial: "ui-components/v1/cards/plan_details", collection: @member_groups, as: :plan
                #filteredPlans data-enrollments="#{@member_groups.map {|mg| mg.group_enrollment.to_json}}" data-carriers="#{@member_groups.map {|mg| ::Caches::CustomCache.lookup(::BenefitSponsors::Organizations::Organization, :plan_shopping, mg.group_enrollment.product.issuer_profile_id).to_json { mg.group_enrollment.product.issuer_profile }}}"
                
      .no-buffer
        p.pull-right
          a.btn.btn-default.compare-selected-plans-link href="javascript:void(0);" style="display: none;" data-uri="#{comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind)}" = l10n("compare_plans").to_s.upcase
      .col-lg-3.col-md-3.col-sm-3.col-xs-12.col-md-offset-1.col-sm-offset-1.right-section
        - if @change_plan.blank? && @market_kind == "individual"
          - if @enrollment_kind.blank? && is_under_open_enrollment?
            = render partial: 'shared/individual_progress', locals: {step: '4'}
          - else
            = render partial: 'shared/sep_progress', locals: {step: '5'}
        - elsif @change_plan.blank? && @market_kind == "coverall"
          = render partial: 'shared/resident_progress', locals: {step: '4'}
        - elsif @change_plan.blank?
          = render partial: 'shared/signup_progress', locals: {step: '5'}
        - elsif @change_plan == "change_by_qle"
          = render partial: 'shared/qle_progress', locals: {step: '2',show_button:'true'}
        - elsif @change_plan == "change_plan"
          - if (@market_kind == "individual" && !is_under_open_enrollment?) || @enrollment_kind == 'sep'
            = render partial: 'shared/sep_shop_for_plans_progress', locals: {step: '2'}
          - else
            = render partial: 'shared/shop_for_plans_progress', locals: {step: '1', show_waive: true}

.modal.fade#plans-compare-alert
  .modal-dialog.modal-lg
    .modal-content
      .modal-header
        button.close type="button" data-dismiss="modal" aria-label="Close"
          span aria-hidden="true" &times;
        h4.modal-title = l10n("plan_compare_alert")
      .modal-body
        p style='color:red;' = l10n(".can_not_select_more_than_n_plans_to_compare", number: 3)
      .modal-footer
        button.btn.btn-default type="button" data-dismiss="modal"

= render :partial => "ui-components/v1/modals/waive_confirmation", :locals => {:enrollment => @hbx_enrollment } if @hbx_enrollment.try(:employee_role).present?

= render :partial => "ui-components/v1/modals/help_with_plan", :locals => {:enrollment => @hbx_enrollment }

javascript:

  var availableEnrollments = [];
  var availableCarriers = [];
  var filteredArray = [];
  var currentPlans = [];
  var filteredResultsArray = [];
  var enrollments = document.getElementById('filteredPlans').dataset.enrollments;
  var carriers = document.getElementById('filteredPlans').dataset.carriers;
  var filterType = String;
  var selectedPlans = document.getElementsByClassName("myfilteredPlans");
     
  // Grabs available products as JSON for filtering onload
  (function() {
    document.getElementById('filteredPlans').classList.add('hidden');
    getEnrollments()
  })();
  
  var coverageKind = "#{@hbx_enrollment.coverage_kind}";

  if (coverageKind == "dental") {
    $(".plan-metal-level-selection-filter").attr("disabled", true);
  }
  
  function clearSelections() {
    Array.from(selectedPlans).forEach(function(plan) {
      if (plan) {
        plan.remove()
      }
    })
  }
  
  function filterBy(element) {
    filterType = element.dataset.sortBy;
    clearSelections()
    applyFilter()
    filteredPlans(filterType)
  }
  
  function getEnrollments() {
    enrollments = JSON.parse(enrollments)
    carriers = JSON.parse(carriers)
    
    // Formats enrollment to proper JSON format for filters
    for(enrollment of enrollments) {
      enrollment = JSON.parse(enrollment)
      availableEnrollments.push(enrollment)
    }
    // Formats carriers to proper JSON format for filters
    for(carrier of carriers) {
      carrier = JSON.parse(carrier)
      availableCarriers.push(carrier)
    }
  }
  
  function applyFilter() {
    // Apply's filtered plans to view
    document.getElementById('plans').classList.add('hidden')
    document.getElementById('filteredPlans').classList.remove('hidden')
  }
  
  function filteredPlans(type) {
    filteredArray = [];
    // Filters by Title
    if (type == "plan-name") {
      availableEnrollments.forEach(function(enrollment){filteredArray.push(enrollment)})
      filteredArray.sort(function(a,b) {
        var titleA = a.product.title.toLowerCase();
        var titleB = b.product.title.toLowerCase();
        if (titleA < titleB) //sort string ascending
          return -1
        if (titleA > titleB)
          return 1
        return 0 //default return value (no sorting)
      })
    }
    
    if (type == "plan-metal-premium") {
      filteredArray = [];
      // Filter by premium
      availableEnrollments.forEach(function(enrollment){filteredArray.push(enrollment)})
      filteredArray.sort(function(a,b) {
        var priceA = parseFloat(a.product_cost_total - a.sponsor_contribution_total).toFixed(2);
        var priceB = parseFloat(b.product_cost_total - b.sponsor_contribution_total).toFixed(2);
        if (priceA < priceB) //sort string ascending
          return -1
        if (priceA > priceB)
          return 1
        return 0 //default return value (no sorting)
      })
    }
    showFilteredResults()
  }
  // Filters based on Metal Level
  function filterResultsSelections(selections) {
    var resultsArray = [];
    
    metalLevels = selections.selectedMetalLevels;
    if (metalLevels) {
       metalLevels.forEach(function(metalLevel) {
         availableEnrollments.forEach(function(enrollment) {
           if (enrollment.product.metal_level_kind.toLowerCase() == metalLevel.toLowerCase()) {
             resultsArray.push(enrollment);
           }
         })
       })
    }
    // Filters based on Plan Type
    planTypes = selections.selectedPlanTypes;
    if (planTypes) {
      planTypes.forEach(function(plan) {
        availableEnrollments.forEach(function(enrollment) {
          if (enrollment.product.health_plan_kind.toLowerCase() == plan.toLowerCase()) {
            resultsArray.push(enrollment);
          }
        })
      })
    }
    // Filters based on Premium Amount
    premiumFrom = parseFloat(selections.premiumFromAmountValue || 0).toFixed(2);
    premiumTo = parseFloat(selections.premiumToAmountValue || 0).toFixed(2);
    
    availableEnrollments.filter(function(enrollment) {
      premiumTotal = parseFloat(enrollment.product_cost_total - enrollment.sponsor_contribution_total).toFixed(2);
      if (premiumTotal >= premiumFrom && premiumTotal <= premiumTo) {
        resultsArray.push(enrollment);
      }
    })
    // Removes duplicates from results array
    filteredArray = removeDuplicates(resultsArray)
    // Shows results in the view
    clearSelections();
    applyFilter();
    showFilteredResults()
  }
  
  function showFilteredResults() {
    var element = document.getElementById('filteredPlans');
    filteredArray.forEach(function(result) {
      var div = document.createElement('div')
      div.setAttribute('class', 'myfilteredPlans')
      div.innerHTML = '<div class="module plan-row panel panel-default">\
        <div class="panel-body">\
          <div class="row">\
            <div class="col-sm-2 col-md-2">\
              Carrier Logo\
            </div>\
            <div class="col-md-7">\
              <h3 class="no-buffer"><a data-remote="true">'+result.product.title+'</a>\
                <br>\
                <small>Carrier Name</small>\
              </h3>\
            </div>\
            <div class="col-md-3">\
              <div class="price-wrapper pull-right">\
                <h2 class="no-buffer plan-premium">\
                  '+parseFloat(result.product_cost_total - result.sponsor_contribution_total).toFixed(2)+'\
                </h2>\
              </div>\
            </div>\
          </div>\
        </div>\
      </div>'
      element.append(div)
      //console.log(result)
    });
  }
  
  function removeDuplicates(data) {
    return data.filter((item, index,arr)=>{
      const c = arr.map(item=> item.product_cost_total);
      return  index === c.indexOf(item.product_cost_total)
    })
  }