- content_for :horizontal_status do
  = render :partial => 'insured/families/horizontal_status.html.erb', locals: {step: 2}
= render "ui-components/v1/modals/detail_modal"
#message_form
.container#plan_shoppings_show_form
  .select_plan_wrapper
    .row
      .col-lg-8.col-md-8.col-sm-8.col-xs-12
        .ct-1
          h1.heading-text = l10n("choose_plan")
          h4.switch-header = l10n(".choose_plan_filter_results_header")
          h4.swtich-header
          .row.no-buffer
            = render "shared/plan_shoppings/more_plan_details"
          p.pull-right
            a.btn.btn-default.compare-selected-plans-link href="javascript:void(0);" style="display: none;" data-uri="#{comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind)}"
              = l10n("compare_plans").to_s.upcase
            #plan-summary
            #all-plans.all-filters-row
              = render partial: './ui-components/v1/filters/plan_filters'
              .col-lg-9.col-md-9.co-sm-9.col-xs-12#planContainer style="padding-right:0"
                - if @market_kind == "shop"
                  button.btn.btn-default.pull-right.hidden#compareBtn onclick="compareResults()" data-uri="#{comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind)}" = l10n("compare_plans").to_s.upcase
                br
                .sort-area.mt-1.mb-1
                  span.mr-1
                    strong = l10n("sort_by")
                  .btn-group#sort_by role="group"
                    a.btn.btn-default data-sort-by="plan-name" onclick="filterBy(this)" = l10n("plan_name")
                    a.btn.btn-default data-sort-by='plan-metal-premium' onclick="filterBy(this)" = l10n("premium_amount")
                    a.btn.btn-default data-sort-by='plan-metal-deductible' onclick="filterBy(this)" = l10n("deductible")
                    a.btn.btn-default data-sort-by='plan-carrier' onclick="filterBy(this)" = l10n("carrier")
              - if @market_kind == 'individual'
                #ivl_plans
                  h3
                    = l10n("loading")
                    | ...
              - if @market_kind == "shop"
                #plans
                  = render partial: "ui-components/v1/cards/plan_details", collection: @member_groups, as: :plan
                #filteredPlans data-enrollments="#{json_for_plan_shopping_member_groups(@member_groups)}"

        .no-buffer
          p.pull-right
            a.btn.btn-default.compare-selected-plans-link href="javascript:void(0);" style="display: none;" data-uri="#{comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind)}" = l10n("compare_plans").to_s.upcase

      .col-lg-3.col-md-3.col-sm-3.col-xs-12.col-md-offset-1.col-sm-offset-1.right-section
        - if @change_plan.blank? && @market_kind == "individual"
          - if @enrollment_kind.blank? && is_under_open_enrollment?
            = render partial: 'shared/individual_progress', locals: {step: '4'}
          - else
            = render partial: 'shared/sep_progress', locals: {step: '5'}
        - elsif @change_plan.blank? && @market_kind == "coverall"
          = render partial: 'shared/resident_progress', locals: {step: '4'}
        - elsif @change_plan.blank?
          = render partial: 'shared/signup_progress', locals: {step: '5'}
        - elsif @change_plan == "change_by_qle"
          = render partial: 'shared/qle_progress', locals: {step: '2', show_button: 'true'}
        - elsif @change_plan == "change_plan"
          - if (@market_kind == "individual" && !is_under_open_enrollment?) || @enrollment_kind == 'sep'
            = render partial: 'shared/sep_shop_for_plans_progress', locals: {step: '2'}
          - else
            = render partial: 'shared/shop_for_plans_progress', locals: {step: '1', show_waive: true}

.modal.fade#plans-compare-alert
  .modal-dialog.modal-lg
    .modal-content
      .modal-header
        button.close type="button" data-dismiss="modal" aria-label="Close"
          span aria-hidden="true" &times;
        h4.modal-title = l10n("plan_compare_alert")
      .modal-body
        p style='color:red;' = l10n(".can_not_select_more_than_n_plans_to_compare", number: 3)
      .modal-footer
        button.btn.btn-default type="button" data-dismiss="modal"

= render :partial => "ui-components/v1/modals/waive_confirmation_during_shopping", :locals => {:enrollment => @hbx_enrollment } if @hbx_enrollment.is_shop?

= render :partial => "ui-components/v1/modals/help_with_plan", :locals => {:enrollment => @hbx_enrollment }

javascript:
    var marketKind = "#{@hbx_enrollment.kind}";

    if (marketKind === "shop") {
        var availableEnrollments = [];
        var availableCarriers = [];
        var filteredArray = [];
        var currentPlans = [];
        var filteredResultsArray = [];
        var enrollments = document.getElementById('filteredPlans').dataset.enrollments;
        var carriers = document.getElementById('filteredPlans').dataset.carriers;
        var filterType = String;
        var selectedPlans = document.getElementsByClassName("myfilteredPlans");
        var carrierLogos = JSON.parse('#{raw(digest_logos.to_json)}');
        // Grabs available products as JSON for filtering onload
        (function() {
            document.getElementById('filteredPlans').classList.add('hidden');
            getEnrollments()
        })();

        var coverageKind = "#{@hbx_enrollment.coverage_kind}";

        if (coverageKind == "dental") {
            $(".plan-metal-level-selection-filter").attr("disabled", true);
        }

        function resetAllFilters() {
            clearAll()
            clearSelections()
            total_plans = $('#plans .plan-row').length
            $("#plans-count").text(total_plans);
        }

        function clearSelections() {
            Array.from(selectedPlans).forEach(function (plan) {
                if (plan) {
                    plan.remove()
                }
            })
            document.getElementById('plans').classList.remove('hidden')
        }

        function filterBy(element) {
            filterType = element.dataset.sortBy;
            clearSelections()
            clearAll()
            applyFilter()
            filteredPlans(filterType)
        }

        function getEnrollments() {
            enrollments = JSON.parse(enrollments)

        }

        function applyFilter() {
            // Apply's filtered plans to view
            document.getElementById('plans').classList.add('hidden')
            document.getElementById('filteredPlans').classList.remove('hidden')
        }

        function filteredPlans(type) {
            filteredArray = [];

            if (type == "plan-name") {
                // Filters by Title
                availableEnrollments.forEach(function (enrollment) {
                    filteredArray.push(enrollment)
                })
                filteredArray.sort(function (a, b) {
                    var titleA = a.product.title.toLowerCase();
                    var titleB = b.product.title.toLowerCase();
                    if (titleA < titleB) //sort string ascending
                        return -1
                    if (titleA > titleB)
                        return 1
                    return 0 //default return value (no sorting)
                })
            }

            if (type == "plan-metal-premium") {
                // Filter by premium
                availableEnrollments.forEach(function (enrollment) {
                    filteredArray.push(enrollment)
                })
                filteredArray.sort(function (a, b) {
                    var priceA = parseFloat(a.product_cost_total - a.sponsor_contribution_total).toFixed(2);
                    var priceB = parseFloat(b.product_cost_total - b.sponsor_contribution_total).toFixed(2);
                    if (Number(priceA) < Number(priceB)) //sort string ascending
                        return -1
                    if (Number(priceA) > Number(priceB))
                        return 1
                    return 0 //default return value (no sorting)
                })
            }

            if (type == "plan-metal-deductible") {
                // Filter by deductible
                availableEnrollments.forEach(function (enrollment) {
                    filteredArray.push(enrollment)
                })
                filteredArray.sort(function (a, b) {
                    var priceA = parseFloat(a.product.deductible).toFixed(0);
                    var priceB = parseFloat(b.product.deductible).toFixed(0);
                    if (Number(priceA) < Number(priceB)) //sort string ascending
                        return -1
                    if (Number(priceA) > Number(priceB))
                        return 1
                    return 0 //default return value (no sorting)
                })
            }

            if (type == "plan-carrier") {
                // Filters by Carrier
                availableEnrollments.forEach(function (enrollment) {
                    filteredArray.push(enrollment)
                })
                filteredArray.sort(function (a, b) {
                    var nameA = a.product.issuer_name.toLowerCase();
                    var nameB = b.product.issuer_name.toLowerCase();
                    if (nameA < nameB) //sort string ascending
                        return -1
                    if (nameA > nameB)
                        return 1
                    return 0 //default return value (no sorting)
                })
            }

            showFilteredResults()
        }

        function filterResultsSelections(selections) {
            var resultsArray = [];
            // Filters based on Metal Level
            metalLevels = selections.selectedMetalLevels;
            if (metalLevels) {
                metalLevels.forEach(function (metalLevel) {
                    availableEnrollments.forEach(function (enrollment) {
                        if (enrollment.product.metal_level_kind.toLowerCase() == metalLevel.toLowerCase()) {
                            resultsArray.push(enrollment);
                        }
                    })
                })
            }
            // Filters based on Plan Type
            planTypes = selections.selectedPlanTypes;
            if (planTypes) {
                planTypes.forEach(function (plan) {
                    availableEnrollments.forEach(function (enrollment) {
                        if (enrollment.product.product_type.toLowerCase() == plan.toLowerCase()) {
                            resultsArray.push(enrollment);
                        }
                    })
                })
            }
            // Filters based on Premium Amount
            premiumFrom = parseFloat(selections.premiumFromAmountValue || 0).toFixed(2);
            premiumTo = parseFloat(selections.premiumToAmountValue || 0).toFixed(2);

            availableEnrollments.filter(function (enrollment) {
                premiumTotal = parseFloat(enrollment.product_cost_total - enrollment.sponsor_contribution_total).toFixed(2);
                if (Number(premiumTotal) >= Number(premiumFrom) && Number(premiumTotal) <= Number(premiumTo)) {
                    resultsArray.push(enrollment);
                }
            })
            // Filters based on Deductible Amount
            deductibleFrom = parseFloat(selections.deductibleFromAmountValue || 0).toFixed(0);
            deductibleTo = parseFloat(selections.deductibleToAmountValue || 0).toFixed(0);

            if (selections.deductibleFromAmountValue != "") {
                availableEnrollments.filter(function (enrollment) {
                    deductible = parseFloat(enrollment.product.deductible.replace(',', '').replace('$', '')).toFixed(0);
                    if (Number(deductible) >= Number(deductibleFrom) && Number(deductible) <= Number(deductibleTo)) {
                        resultsArray.push(enrollment);
                    }
                })
            }
            // Filters based on Carrier
            carrier = selections.selectedCarrier;
            if (carrier) {
                availableEnrollments.forEach(function (enrollment) {
                    if (enrollment.product.issuer_name.toLowerCase() == carrier.toLowerCase()) {
                        resultsArray.push(enrollment);
                    }
                })
            }

            if (selections.selectedHSA) {
                var hsa = Boolean;
                if (selections.selectedHSA == "Yes") {
                    hsa = true;
                } else {
                    hsa = false;
                }

                availableEnrollments.filter(function (enrollment) {
                    if (enrollment.product.hsa_eligibility == hsa) {
                        resultsArray.push(enrollment);
                    }
                })

            }


            // Removes duplicates from results array
            filteredArray = removeDuplicates(resultsArray)
            // Shows results in the view
            $("#plans-count").text(filteredArray.length);
            clearSelections();
            applyFilter();
            showFilteredResults()
        }

        function showFilteredResults() {
            var element = document.getElementById('filteredPlans');
            filteredArray.forEach(function (result) {
                console.log(result)
                var logo = carrierLogos[result.product.issuer_name];
                if (result.product.kind == 'health') {
                    var plan_kind = result.product.health_plan_kind
                }
                else if (result.product.dental_plan_kind) {
                    var plan_kind = result.product.dental_plan_kind
                }

                if (result.member_enrollments.length > 1) {
                    var deductible = result.product.family_deductible;
                    var deductibeType = "FAMILY DEDUCTIBLE"
                } else {
                    var deductible = result.product.deductible;
                    var deductibeType = "DEDUCTIBLE"
                }

                if (result.product.sbc_document) {
                    var sbc_url = '/document/download/' + result.product.sbc_document.identifier.split("#")[0].split(":").pop() + '/' + result.product.sbc_document.identifier.split("#")[1] + '?content_type=application/pdf&amp;filename=' + result.product.title.replace(/[^0-9a-z]/gi, '') + '.pdf&amp;disposition=inline';
                }
                else {
                    var sbc_url = "";
                }

                var div = document.createElement('div')
                div.setAttribute('class', 'myfilteredPlans')
                div.innerHTML = ''
                element.append(div)
            })
        }
    }
    if (marketKind === 'individual') {
        $(document).ready(function () {
            var coverageKind = "#{@hbx_enrollment.coverage_kind}";
            if (coverageKind === "dental") {
                $(".plan-metal-level-selection-filter").attr("disabled", true);
            }

            $.ajax({
                url: "#{plans_insured_plan_shopping_path(id: @hbx_enrollment.id, change_plan: @change_plan, market_kind: @market_kind, coverage_kind: @coverage_kind, enrollment_kind: @enrollment_kind) if @hbx_enrollment.present?}",
                type: "GET"
            });
        });
    }