- selected_kind_carrier = f.object.product_option_choice == 'single_issuer'
- selected_kind_metal_level = f.object.product_option_choice == 'metal_level'
- selected_kind_plan = f.object.product_option_choice == 'single_product'
- show_benefit_application_tile = params[:show_benefit_application_tile] ||= false

- if @benefit_package_form.new_record?
  h1.heading-text Select Your Plan Offering
  h4 Let your plan participants choose any plan offered by one carrier, any plan available within a specific metal level or you can offer just one plan. It doesn't cost you more to let them choose by carrier (insurance company) or metal level.
  br
- else
  .edit-offering.health
    h4.currently-offered
    .offered-plan

.reference-steps
  - unless @benefit_package_form.new_record?
    br
    h1.heading-text Edit Your Plan Offering
    h4.currently-offering
    br
    br
  .benefit-package-health
    #metal-level-select.card
      .card-body
        ul.nav.nav-tabs role="tablist"
          input#ppKind type="hidden" name="benefit_package[sponsored_benefits_attributes][0][product_package_kind]"
          li.col-md-4.col-sm-4 role="presentation" onclick="radioSelected(this)"
            a href="#carrier" aria-controls="carrier" role="tab" data-toggle="tab" data-name="single_issuer"
              i.far.fa-circle.mr-2
              | One Carrier
          li.col-md-4.col-sm-4 role="presentation" onclick="radioSelected(this)"
            a href="#level" aria-controls="level" role="tab" data-toggle="tab" data-name="metal_level"
              i.far.fa-circle.mr-2
              | One Level
          li.col-md-4.col-sm-4 role="presentation" onclick="radioSelected(this)"
            a href="#plan" aria-controls="plan" role="tab" data-toggle="tab" data-name="single_product"
              i.far.fa-circle.mr-2
              | One Plan
        .tab-content
          .tab-pane.fade#carrier role="tabpanel"
            h4 Select your preferred insurance company carrier. Your plan participants will be able to choose any plan offered by the carrier you select. Your costs will be fixed to a specific plan you’ll choose in a minute.
            br
            - @benefit_package_form.catalog.single_issuer_options.each do |issuer_name, issuer_id|
              .col-xs-3.carriers
                .col-xs-12 style="min-height:130px"
                  label.container 
                    = issuer_name
                    = f.hidden_field :kind, value: "health"
                    = f.radio_button :product_option_choice, "#{issuer_id}", class: 'product_option_choice', onclick:"getPlanInfo(this)", data: {name: issuer_name}
                    span.checkmark
              
          .tab-pane.fade#level role="tabpanel"
            h4 Select your preferred metal level. Your plan participants will be able to choose any plan by any carrier within the metal level you select. Your costs will be fixed to a specific plan you’ll choose in a minute. Bronze means the plan is expected to pay 60% of expenses for an average population of consumers, Silver 70%, Gold 80% and Platinum 90%.
            br
            - @benefit_package_form.catalog.metal_levels.each do |kind|
              .col-xs-3.metals
                .col-xs-12
                  label.container 
                    = kind
                    = f.radio_button :product_option_choice, kind, class: 'product_option_choice', onclick:"getPlanInfo(this)", data: {name: kind}
                    span.checkmark
                    
          .tab-pane.fade#plan role="tabpanel"
            h4 Select your preferred insurance company carrier. You will then select one plan and it'll be the only plan your participants can choose. It'll never cost you more to let your plan participants choose by carrier or by metal level. Are you sure you only want to offer a single plan?
            br
            - @benefit_package_form.catalog.single_product_options.each do |carrier_name, carrier_id|
              .col-xs-3.plans
                .col-xs-12
                  label.container 
                    = carrier_name
                    = f.radio_button :product_option_choice, carrier_id, class: 'product_option_choice', onclick:"getPlanInfo(this)", data: {name: carrier_name}
                    span.checkmark
                
        
        #referencePlans.hidden
          h2.heading-text.pt-1.float-left Select Your Reference Plan

          h4 Now select a reference plan. The reference plan is used to cap employer costs. You’ll choose a reference plan. Then, your contribution towards employee premiums will be applied to the reference plan you choose regardless of which plans your employees select. After you select your reference plan, scroll down to review your costs.
          #yourPlans
            .float-right.mb-2
              #yourPlanTotals
              br
          
          #yourSponsorContributions
          
          #yourReferencePlanDetails

// Shows view summary modal    
.modal.fade#viewSummaryModal tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
  .modal-dialog role="document"
    .modal-content
      .modal-header
        button.close type="button" data-dismiss="modal" aria-label="close" x
        h4.heading-text.mt-0.mb-0.col-10#viewSummaryTitle
      .modal-body
        | Summary Data Here
      .modal-footer
        .pull-left 
          a href="/"
            i.far.fa-file-pdf.fa-2x.mr-1
            | Summary of Benefits and Coverage
        .pull-right
          button.btn.btn-default.btn-sm.btn-more-details More Details
          button.btn.btn-default.btn-sm data-dismiss="modal" style="margin-top:-1px" Close

javascript:
  var productOptionKind = String;
  var selectedRadio = String;
  var sponsorContribution = String;
  var filteredProducts = String;
  var referencePlanID = String;
  var planOptions = #{@benefit_package_form.catalog.plan_options.to_json.html_safe};
  var sponsorContributions = #{@benefit_package_form.catalog.sponsor_contributions(@benefit_package_form.id).to_json.html_safe};
  var erCL = #{aca_shop_market_employer_contribution_percent_minimum};
  var familyCL = #{aca_shop_market_employer_family_contribution_percent_minimum};
  
  function radioSelected(element) {
    setCircle(element)
    disablePlanYearButton()
  }
  
  function setCircle(element) {
    // Adds toggle circle icon to metal level tabs
    var items = document.querySelectorAll('#metal-level-select ul li');
    document.getElementById('referencePlans').classList.add('hidden')
    
    for (item of items) {
      if (item.querySelector('.fa-dot-circle')) {
        item.querySelector('.fa-dot-circle').classList.toggle('fa-circle')
        item.querySelector('a').classList.remove('active')
      }
    
      if (item.innerText == element.innerText) {
        element.querySelector('.fa-circle').classList.toggle('fa-dot-circle')
        // Gets product option info
        productOptionKind = element.querySelector('a').dataset.name;
        // Sets kind to hidden input field for form submission
        document.getElementById('ppKind').setAttribute('value', productOptionKind)
        item.querySelector('a').classList.add('active')
      }
    }
  }
  
  function getPlanInfo(element) {
    var selectedRadio = element.value;
    var selectedName = element.dataset.name;
    filteredProducts = planOptions[productOptionKind][selectedName];
    // Sort by plan title
    filteredProducts.sort(function(a,b) {
      if (a.title < b.title) return -1;
      if (a.title > b.title) return 1;
      return 0;
    })
    populateReferencePlans(filteredProducts)
  }
  
  function populateReferencePlans(plans) {
    sponsorContribution = sponsorContributions[productOptionKind]['contribution_levels'];
    
    document.getElementById('yourSponsorContributions').innerHTML = '#{escape_javascript(render :partial => "./ui-components/v1/cards/sponsor_contributions_shell")}'
    
    // Makes reference plans visible
    document.getElementById('referencePlans').classList.remove('hidden');
    // Removes reference plans if metal level changes
    var populatedReferencePlans = document.querySelectorAll("#yourAvailablePlans");
    
    if (populatedReferencePlans) {
      for(rplans of populatedReferencePlans) {
        rplans.remove()
      }
    }

    // Build reference plans to be displayed in UI
    for (plan of filteredProducts) {
      var div = document.createElement('div')
      document.getElementById('yourPlanTotals').innerHTML = `<span class="pull-right mr-3">Displaying: <b>${filteredProducts.length} plans</b></span>`
      div.setAttribute('id', 'yourAvailablePlans')
        div.innerHTML =
        `<div class="col-xs-4 reference-plans">
          <div class="col-xs-12 p0 mb-1">
            <label class="container">
              <p class="heading-text reference-plan-title mb-1"> ${plan.title}</p>
              <span class="plan-label">Type:</span> <span class="rp-plan-info">${plan.health_plan_kind}</span><br>
              <span class="plan-label">Carrier:</span> <span class="rp-plan-info">${plan.carrier_name}</span><br>
              <span class="plan-label">Level:</span> <span class="rp-plan-info">${plan.metal_level_kind}</span><br>
              <span class="plan-label">Network:</span> <span class="rp-plan-info">Nationwide</span><br>
              <span class="plan-label mt-1 rp-view-summary" onclick="viewSummary(this)" data-plan-title="${plan.title}">View Summary</span><br>
              <input type="radio" name="benefit_package[sponsored_benefits_attributes][0][reference_plan_id]" id="${plan.id}" onclick="displayReferencePlanDetails(this)" value="${plan.id}" data-plan-title="${plan.title}" data-plan-carrier="${plan.carrier_name}" data-plan-id="${plan.id}" data-plan-metal-level="${plan.metal_level_kind}" data-plan-type="${plan.health_plan_kind}">
              <span class="checkmark"></span>
            </label>
          </div>
        </div>
        `

        document.getElementById('yourPlans').append(div);
    }
    
    setTimeout(function() {
      buildSponsorContributions(sponsorContribution)
    },400);
  }
  
  function buildSponsorContributions(contributions) {
    var element = document.getElementById('benefitFields');
    index = 0;
    
    for (contribution of contributions) {
      index += 1;
      var attrPrefix = 'benefit_package[sponsored_benefits_attributes][0][sponsor_contribution_attributes][contribution_levels_attributes][' + index + ']';
      var div = document.createElement('div')
      div.setAttribute('id', 'yourAvailableContributions')
      div.innerHTML =
      `<div class="row">
        <input id="${attrPrefix}[id]" name="${attrPrefix}[id]" type="hidden" value="${contribution}['id']">
         <div class="col-xs-6 pr-3">
          <div class="row sc-container">
            <div class="col-xs-12 ml-2 mt-2">
              <label class="container ml-1">${contribution.display_name}
                <input type="checkbox" checked="checked" id="${attrPrefix}[is_offered]" class="contribution_handler" name="${attrPrefix}[is_offered]" type="checkbox" onchange="contributionAmounts(this)" value="${contribution}["is_offered"]" data-displayname="${contribution.display_name}">
                <span class="checkmark"></span>
              </label>
            </div>
          </div>
         </div>
        <div class="col-xs-6">
          <div class="col-xs-3">
            <input id="${attrPrefix}[display_name]" name="${attrPrefix}[display_name]" type="hidden" value="${contribution}["display_name"]">
            <input type="number" id="${contribution.id}" name="${attrPrefix}[contribution_factor]" value="${(contribution["contribution_factor"] * 100)}" onchange="setInputSliderValue(this)" data-displayname="${contribution.display_name}" data-contribution-input=true>
          </div>
          <div class="col-xs-9">
            <input type="range" min="0" max="100" value="${(contribution["contribution_factor"] * 100)}" step="5" class="slider" id="${contribution.id}" onchange="setInputValue(this)" data-id="${contribution.id}" data-name="${contribution.display_name}">
          </div>
        </div>
       </div>
      `
      element.append(div)
    }
  }

  function calculateEmployerContributions(productOptionKind,referencePlanID, sponsoredBenefitID)  {
    $.ajax({
      type: "GET",
      data:{product_package_kind: productOptionKind,reference_plan_id: referencePlanID, sponsored_benefit_id: sponsoredBenefitID},
      url: "calculate_employer_contributions",
      success: function (d) {
        var eeMin = parseFloat(d[0][2]).toFixed(2);
        var eeCost = parseFloat(d[1][2]).toFixed(2);
        var eeMax = parseFloat(d[2][2]).toFixed(2);
        showCostDetails(eeCost,eeMin,eeMax)
      }
    });
  }
  
  function displayReferencePlanDetails(element) {
    planTitle = element.dataset.planTitle;
    metalLevel = element.dataset.planMetalLevel;
    carrierName = element.dataset.planCarrier;
    planType = element.dataset.planType;
    referencePlanID = element.id;
    sponsoredBenefitID = null;
    calculateEmployerContributions(productOptionKind, referencePlanID, sponsoredBenefitID)
    showFormButtons();

    document.getElementById('yourReferencePlanDetails').innerHTML = '#{escape_javascript(render :partial => "./ui-components/v1/cards/reference_plan_details_shell")}'
    
    document.getElementById('referencePlanTitle').append(planTitle);
    document.getElementById('rpType').append(planType);
    document.getElementById('rpCarrier').append(carrierName);
    document.getElementById('rpMetalLevel').append(metalLevel);
    document.getElementById('rpNetwork').append('N/A');
  }
  
  function showCostDetails(cost,min,max) {
    document.getElementById('rpEstimatedMonthlyCost').append('$ '+cost);
    document.getElementById('rpMin').append('$ '+min);
    document.getElementById('rpMax').append('$ '+max);
  }
  
  function setInputValue(element) {
    document.getElementById(element.dataset.id).value = element.value;
    contributionAmounts(element)
  }

  function setInputSliderValue(element) {
    document.querySelector("[data-id='"+element.id+"']").value = element.value
    contributionAmounts(element)
  }
  
  function showFormButtons() {
    document.getElementById('addBenefitPackage').classList.remove('hidden')
    document.getElementById('submitBenefitPackage').classList.remove('hidden')
    document.getElementById('cancelBenefitPackage').classList.remove('hidden')
  }
  
  function hideFormButtons() {
    document.getElementById('addBenefitPackage').classList.add('hidden')
    document.getElementById('submitBenefitPackage').classList.add('hidden')
    document.getElementById('cancelBenefitPackage').classList.add('hidden')
  }
  
  function disablePlanYearButton() {
    var savePlanYearButton = document.getElementById('submitBenefitPackage');
    savePlanYearButton.classList.add('disabled')
  }
  
  function enablePlanYearButton() {
    var savePlanYearButton = document.getElementById('submitBenefitPackage');
    savePlanYearButton.classList.remove('disabled')
  }
  
  var eeContribution;
  var spouse;
  var domesticPartner;
  var childUnder26;
  var employeeOnly;
  var familyOnly;
  var contributionInputs;
  
  function contributionAmounts(element) {
    contributionInputs = document.querySelectorAll("[data-contribution-input='true']")
    contributionHandlers = document.querySelectorAll(".contribution_handler")

    contributionInputs.forEach(function(element) {
      switch (element.dataset.displayname) {
        case 'Employee':
          eeContribution = element.value;
        break;
        case 'Spouse':
          spouse = element.value;
        break;
        case 'Domestic Partner':
          domesticPartner = element.value;
        break;
        case 'Child Under 26':
          childUnder26 = element.value;
        break;
        case 'Employee Only':
          employeeOnly = element.value;
        break;
        case 'Family':
          familyOnly = element.value;
        break;
      }
    })

    contributionHandlers.forEach(function(element) {
      switch (element.dataset.displayname) {
        case 'Employee':
          if(!(element.checked)) {
            eeContribution = 100
          }
        break;
        case 'Spouse':
          if(!(element.checked)) {
            spouse = 100
          }
        break;
        case 'Domestic Partner':
          if(!(element.checked)) {
            domesticPartner = 100
          }
        break;
        case 'Child Under 26':
          if(!(element.checked)) {
            childUnder26 = 100
          }
        break;
        case 'Employee Only':
          if(!(element.checked)) {
            employeeOnly = 100
          }
        break;
        case 'Family':
          if(!(element.checked)) {
            familyOnly = 100
          }
        break;
      }
    })

    if (eeContribution < erCL || employeeOnly < erCL) {
      disablePlanYearButton()
    } else if (familyOnly < familyCL || spouse < familyCL || domesticPartner < familyCL || childUnder26 < familyCL) {
      disablePlanYearButton()
    } else {
      enablePlanYearButton()
    }
  }
  
  function viewSummary(element) {
    var title = element.dataset.planTitle;
    document.getElementById('viewSummaryTitle').innerHTML = title;
    $('#viewSummaryModal').modal('show');
    $('#viewSummaryModal').data('bs.modal').$backdrop.css('background-color','transparent')
  }
